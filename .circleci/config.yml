version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0 
  python:
    docker:
      - image: python:3.9-buster
  aws:
    docker:
      - image: amazon/aws-cli:latest


commands:
  destroy-environment:
    description: Destroy cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.Workflow_ID >> "
            aws cloudformation delete-stack \
              --stack-name "${ENVIRONMENT_NAME}-network"


jobs:
 
  test:
    executor: python
    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  build:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

      - run:
          name: Build Docker image
          command: |
            DOCKER_PATH=leopoldwalther/valencia-real-estate-report
            echo "Docker ID and Image: $DOCKER_PATH"

            docker build --tag=valencia-real-estate-report .

            # Authenticate & tag
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker tag valencia-real-estate-report $DOCKER_PATH:latest

            # Push image to a docker repository
            docker push $DOCKER_PATH:latest

  deploy-network:
    executor: aws
    steps:
      - checkout

      - run:
          name: Deploy EKS network
          command: |
            aws cloudformation deploy \
              --stack-name ${ENVIRONMENT_NAME}-network \
              --template-file infrastructure/eks-network.yml \
              --parameter-overrides file://infrastructure/eks-network-parameters.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
              --region $AWS_DEFAULT_REGION \
              --tags project=${ENVIRONMENT_NAME}-project 


  deploy-cluster:
    executor: aws
    steps:
      - checkout
      - run:
          name: Deploy EKS cluster
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
              --stack-name ${ENVIRONMENT_NAME}-cluster \
              --template-file infrastructure/eks-cluster.yml \
              --parameter-overrides file://infrastructure/eks-cluster-parameters.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
              --region $AWS_DEFAULT_REGION \
              --tags project=${ENVIRONMENT_NAME}-project 

  deploy-nodes:
    executor: aws
    steps:
      - checkout
      - run:
          name: Deploy EKS nodes
          command: |
            aws cloudformation deploy \
              --stack-name ${ENVIRONMENT_NAME}-nodes \
              --template-file infrastructure/eks-nodes.yml \
              --parameter-overrides file://infrastructure/eks-nodes-parameters.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
              --region $AWS_DEFAULT_REGION \
              --tags project=${ENVIRONMENT_NAME}-project 
              --output text >> ~/status.txt

            cat ~/status.txt

      - run:
          name: Get  IPs for Ansible
          command: |
            echo [web] > ~/inventory.txt

            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-JumpHost" \
              --output text >> ~/inventory.txt

            cat ~/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - ./.circleci/inventory.txt
            - ./.circleci/status.txt


workflows:
  default: 

    jobs:
      - test
      - build:
          requires: [test]
      - deploy-network:
          requires: [build]
      - deploy-cluster:
          requires: [deploy-network]
      - deploy-nodes:
          requires: [deploy-cluster]

      
